declare filename "pitchtracker.dsp"; declare name "pitchtracker"; declare compilation_options    "-single -scal -I libraries/ -I project/ -lang wasm";
declare library_path "FaustDSP";
declare library_path "/libraries/stdfaust.lib";
declare library_path "/libraries/filters.lib";
declare library_path "/libraries/maths.lib";
declare filename "FaustDSP";
declare filters_lib_dcblocker_author "Julius O. Smith III";
declare filters_lib_dcblocker_copyright "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>";
declare filters_lib_dcblocker_license "MIT-style STK-4.3 license";
declare filters_lib_lowpass0_highpass1 "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>";
declare filters_lib_lowpass0_highpass1_author "Julius O. Smith III";
declare filters_lib_lowpass_author "Julius O. Smith III";
declare filters_lib_lowpass_copyright "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>";
declare filters_lib_lowpass_license "MIT-style STK-4.3 license";
declare filters_lib_name "Faust Filters Library";
declare filters_lib_pole_author "Julius O. Smith III";
declare filters_lib_pole_copyright "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>";
declare filters_lib_pole_license "MIT-style STK-4.3 license";
declare filters_lib_tf1_author "Julius O. Smith III";
declare filters_lib_tf1_copyright "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>";
declare filters_lib_tf1_license "MIT-style STK-4.3 license";
declare filters_lib_tf1s_author "Julius O. Smith III";
declare filters_lib_tf1s_copyright "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>";
declare filters_lib_tf1s_license "MIT-style STK-4.3 license";
declare filters_lib_zero_author "Julius O. Smith III";
declare filters_lib_zero_copyright "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>";
declare filters_lib_zero_license "MIT-style STK-4.3 license";
declare maths_lib_author "GRAME";
declare maths_lib_copyright "GRAME";
declare maths_lib_license "LGPL with exception";
declare maths_lib_name "Faust Math Library";
declare maths_lib_version "2.1";
declare name "FaustDSP";
process = \(x1).(\(x2).(x1 : _<:_,mem : _,(_,1 : *) : - : +~(_,0.995f : *) : (\(x3).(_<:(_,((1,(0,(1,(((6.2831853071795862f,x3 : *),0.5f : *),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : *) : +),(1,(1,(((6.2831853071795862f,x3 : *),0.5f : *),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : +) : /) : *),(mem : _,((1,(0,(1,(((6.2831853071795862f,x3 : *),0.5f : *),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : *) : -),(1,(1,(((6.2831853071795862f,x3 : *),0.5f : *),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : +) : /) : *):>+~(_,(0,((1,(1,(((6.2831853071795862f,x3 : *),0.5f : *),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : -),(1,(1,(((6.2831853071795862f,x3 : *),0.5f : *),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : +) : /) : -) : *)) : \(x4).(((x2,(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : *),(((_,(1,((_,1 : + : _,(1,((((x4 : mem),0 : <),(x4,0 : >=) : &),((_,(((x4 : mem),0 : <),(x4,0 : >=) : &) : +)~(_,(x2 : int) : %),x2 : ==) : &) : -) : *)~_,0 : ==) : -) : *),((((_,1 : + : _,(1,((((x4 : mem),0 : <),(x4,0 : >=) : &),((_,(((x4 : mem),0 : <),(x4,0 : >=) : &) : +)~(_,(x2 : int) : %),x2 : ==) : &) : -) : *)~_ : mem),1 : +),((_,1 : + : _,(1,((((x4 : mem),0 : <),(x4,0 : >=) : &),((_,(((x4 : mem),0 : <),(x4,0 : >=) : &) : +)~(_,(x2 : int) : %),x2 : ==) : &) : -) : *)~_,0 : ==) : *) : +)~_,1 : max) : /),((x2,(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : *),(((_,(1,((_,1 : + : _,(1,((((x4 : mem),0 : <),(x4,0 : >=) : &),((_,(((x4 : mem),0 : <),(x4,0 : >=) : &) : +)~(_,(x2 : int) : %),x2 : ==) : &) : -) : *)~_,0 : ==) : -) : *),((((_,1 : + : _,(1,((((x4 : mem),0 : <),(x4,0 : >=) : &),((_,(((x4 : mem),0 : <),(x4,0 : >=) : &) : +)~(_,(x2 : int) : %),x2 : ==) : &) : -) : *)~_ : mem),1 : +),((_,1 : + : _,(1,((((x4 : mem),0 : <),(x4,0 : >=) : &),((_,(((x4 : mem),0 : <),(x4,0 : >=) : &) : +)~(_,(x2 : int) : %),x2 : ==) : &) : -) : *)~_,0 : ==) : *) : +)~_,0 : ==) : *) : -))~(100,_ : max)));
